$scope.data[mutiVar3.mutiVar3Value] 78 NodePath {
  parent: 
   Node {
     type: 'AssignmentExpression',
     start: 2123,
     end: 2169,
     loc: SourceLocation { start: [Object], end: [Object] },
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 2123,
        end: 2158,
        loc: [Object],
        object: [Object],
        property: [Object],
        computed: true },
     right: 
      Node {
        type: 'Identifier',
        start: 2161,
        end: 2169,
        loc: [Object],
        name: 'mutiVar3' } },
  hub: undefined,
  contexts: [],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: 
   { references: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     constantViolations: [],
     assignments: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ] },
  opts: 
   { LabeledStatement: { enter: [Object] },
     AssignmentExpression: { enter: [Object] },
     UpdateExpression: { enter: [Object] },
     UnaryExpression: { enter: [Object] },
     ClassDeclaration: { enter: [Object] },
     _exploded: true,
     _verified: true,
     Identifier: { enter: [Object] },
     JSXIdentifier: { enter: [Object] },
     enter: [ [Object] ],
     ForInStatement: { enter: [Object] },
     ForStatement: { enter: [Object] },
     ForOfStatement: { enter: [Object] },
     ForAwaitStatement: { enter: [Object] },
     FunctionDeclaration: { enter: [Object] },
     VariableDeclaration: { enter: [Object] },
     ExportAllDeclaration: { enter: [Object], exit: [Object] },
     ExportDefaultDeclaration: { enter: [Object], exit: [Object] },
     ExportNamedDeclaration: { enter: [Object], exit: [Object] },
     ImportDeclaration: { enter: [Object] },
     DeclareClass: { enter: [Object] },
     DeclareFunction: { enter: [Object] },
     DeclareInterface: { enter: [Object] },
     DeclareModule: { enter: [Object] },
     DeclareModuleExports: { enter: [Object] },
     DeclareTypeAlias: { enter: [Object] },
     DeclareVariable: { enter: [Object] },
     InterfaceDeclaration: { enter: [Object] },
     TypeAlias: { enter: [Object] },
     BlockStatement: { enter: [Object] },
     Program: { enter: [Object] } },
  skipKeys: {},
  parentPath: 
   NodePath {
     parent: 
      Node {
        type: 'ExpressionStatement',
        start: 2123,
        end: 2170,
        loc: [Object],
        expression: [Object] },
     hub: undefined,
     contexts: [],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: 
      { references: [Object],
        constantViolations: [],
        assignments: [Object] },
     opts: 
      { LabeledStatement: [Object],
        AssignmentExpression: [Object],
        UpdateExpression: [Object],
        UnaryExpression: [Object],
        ClassDeclaration: [Object],
        _exploded: true,
        _verified: true,
        Identifier: [Object],
        JSXIdentifier: [Object],
        enter: [Object],
        ForInStatement: [Object],
        ForStatement: [Object],
        ForOfStatement: [Object],
        ForAwaitStatement: [Object],
        FunctionDeclaration: [Object],
        VariableDeclaration: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ImportDeclaration: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareModuleExports: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        InterfaceDeclaration: [Object],
        TypeAlias: [Object],
        BlockStatement: [Object],
        Program: [Object] },
     skipKeys: {},
     parentPath: 
      NodePath {
        parent: [Object],
        hub: undefined,
        contexts: [],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: [Object],
        opts: [Object],
        skipKeys: {},
        parentPath: [Object],
        context: [Object],
        container: [Object],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 5,
        node: [Object],
        scope: [Object],
        type: 'ExpressionStatement',
        typeAnnotation: null },
     context: 
      TraversalContext {
        queue: null,
        parentPath: [Object],
        scope: [Object],
        state: [Object],
        opts: [Object],
        priorityQueue: [] },
     container: 
      Node {
        type: 'ExpressionStatement',
        start: 2123,
        end: 2170,
        loc: [Object],
        expression: [Object] },
     listKey: undefined,
     inList: false,
     parentKey: 'expression',
     key: 'expression',
     node: 
      Node {
        type: 'AssignmentExpression',
        start: 2123,
        end: 2169,
        loc: [Object],
        operator: '=',
        left: [Object],
        right: [Object] },
     scope: 
      Scope {
        uid: 12,
        parent: [Object],
        hub: undefined,
        parentBlock: [Object],
        block: [Object],
        path: [Object],
        labels: [Object],
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     type: 'AssignmentExpression',
     typeAnnotation: null },
  context: 
   TraversalContext {
     queue: null,
     parentPath: 
      NodePath {
        parent: [Object],
        hub: undefined,
        contexts: [],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: [Object],
        opts: [Object],
        skipKeys: {},
        parentPath: [Object],
        context: [Object],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'expression',
        key: 'expression',
        node: [Object],
        scope: [Object],
        type: 'AssignmentExpression',
        typeAnnotation: null },
     scope: 
      Scope {
        uid: 12,
        parent: [Object],
        hub: undefined,
        parentBlock: [Object],
        block: [Object],
        path: [Object],
        labels: [Object],
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     state: 
      { references: [Object],
        constantViolations: [],
        assignments: [Object] },
     opts: 
      { LabeledStatement: [Object],
        AssignmentExpression: [Object],
        UpdateExpression: [Object],
        UnaryExpression: [Object],
        ClassDeclaration: [Object],
        _exploded: true,
        _verified: true,
        Identifier: [Object],
        JSXIdentifier: [Object],
        enter: [Object],
        ForInStatement: [Object],
        ForStatement: [Object],
        ForOfStatement: [Object],
        ForAwaitStatement: [Object],
        FunctionDeclaration: [Object],
        VariableDeclaration: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ImportDeclaration: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareModuleExports: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        InterfaceDeclaration: [Object],
        TypeAlias: [Object],
        BlockStatement: [Object],
        Program: [Object] },
     priorityQueue: [] },
  container: 
   Node {
     type: 'AssignmentExpression',
     start: 2123,
     end: 2169,
     loc: SourceLocation { start: [Object], end: [Object] },
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 2123,
        end: 2158,
        loc: [Object],
        object: [Object],
        property: [Object],
        computed: true },
     right: 
      Node {
        type: 'Identifier',
        start: 2161,
        end: 2169,
        loc: [Object],
        name: 'mutiVar3' } },
  listKey: undefined,
  inList: false,
  parentKey: 'left',
  key: 'left',
  node: 
   Node {
     type: 'MemberExpression',
     start: 2123,
     end: 2158,
     loc: SourceLocation { start: [Object], end: [Object] },
     object: 
      Node {
        type: 'MemberExpression',
        start: 2123,
        end: 2134,
        loc: [Object],
        object: [Object],
        property: [Object],
        computed: false },
     property: 
      Node {
        type: 'MemberExpression',
        start: 2135,
        end: 2157,
        loc: [Object],
        object: [Object],
        property: [Object],
        computed: false },
     computed: true },
  scope: 
   Scope {
     uid: 12,
     parent: 
      Scope {
        uid: 10,
        parent: [Object],
        hub: undefined,
        parentBlock: [Object],
        block: [Object],
        path: [Object],
        labels: [Object],
        references: {},
        bindings: [Object],
        globals: {},
        uids: {},
        data: {} },
     hub: undefined,
     parentBlock: 
      Node {
        type: 'ObjectProperty',
        start: 1819,
        end: 2528,
        loc: [Object],
        method: false,
        shorthand: false,
        computed: false,
        key: [Object],
        value: [Object] },
     block: 
      Node {
        type: 'FunctionExpression',
        start: 1828,
        end: 2528,
        loc: [Object],
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [Object],
        body: [Object] },
     path: 
      NodePath {
        parent: [Object],
        hub: undefined,
        contexts: [],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: [Object],
        opts: [Object],
        skipKeys: {},
        parentPath: [Object],
        context: [Object],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'value',
        key: 'value',
        node: [Object],
        scope: [Circular],
        type: 'FunctionExpression',
        typeAnnotation: null },
     labels: Map { _c: Map {} },
     references: {},
     bindings: 
      { param1: [Object],
        param2: [Object],
        unKnownValue: [Object],
        unKnownValue1: [Object] },
     globals: {},
     uids: {},
     data: {} },
  type: 'MemberExpression',
  typeAnnotation: null }
constructorInfo 17
methodBodyInfo 0
