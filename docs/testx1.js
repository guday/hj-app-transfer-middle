Scope {
    uid: 2,
        parent:
    Scope {
        uid: 1,
            parent:
        Scope {
            uid: 0,
                parent: undefined,
                hub: undefined,
                parentBlock: [Object],
                block: [Object],
                path: [Object],
                labels: [Object],
                references: [Object],
                bindings: {},
            globals: [Object],
                uids: {},
            data: {},
            crawling: false },
        hub: undefined,
            parentBlock:
        Node {
            type: 'ArrayExpression',
                start: 99,
                end: 2435,
                loc: [Object],
                elements: [Object] },
        block:
            Node {
            type: 'FunctionExpression',
                start: 123,
                end: 2434,
                loc: [Object],
                id: null,
                generator: false,
                expression: false,
                async: false,
                params: [Object],
                body: [Object] },
        path:
            NodePath {
            parent: [Object],
                hub: undefined,
                contexts: [],
                data: {},
            shouldSkip: false,
                shouldStop: false,
                removed: false,
                state: [Object],
                opts: [Object],
                skipKeys: {},
            parentPath: [Object],
                context: [Object],
                container: [Object],
                listKey: 'elements',
                inList: true,
                parentKey: 'elements',
                key: 2,
                node: [Object],
                scope: [Circular],
                type: 'FunctionExpression',
                typeAnnotation: null },
        labels: Map { _c: Map {} },
        references: {},
        bindings:
        { '$scope': [Object],
            cache: [Object],
            decFun: [Object],
            scopeData: [Object],
            singleVariable: [Object],
            mutiVar1: [Object],
            mutiVar2: [Object],
            mutiVar3: [Object],
            mutiFun: [Object],
            mutiVar4: [Object],
            singleFun: [Object] },
        globals: {},
        uids: {},
        data: {} },
    hub: undefined,
        parentBlock:
    Node {
        type: 'BlockStatement',
            start: 148,
            end: 2434,
            loc: SourceLocation { start: [Object], end: [Object] },
        body:
            [ [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object] ],
                directives: [] },
    block:
        Node {
        type: 'FunctionDeclaration',
            start: 2145,
            end: 2228,
            loc: SourceLocation { start: [Object], end: [Object] },
        id:
            Node {
            type: 'Identifier',
                start: 2154,
                end: 2160,
                loc: [Object],
                name: 'decFun',
                leadingComments: null },
        generator: false,
            expression: false,
            async: false,
            params: [ [Object], [Object] ],
            body:
        Node {
            type: 'BlockStatement',
                start: 2177,
                end: 2228,
                loc: [Object],
                body: [Object],
                directives: [],
                trailingComments: null },
        leadingComments: [ [Object] ],
            trailingComments: [ [Object] ] },
    path:
        NodePath {
        parent:
            Node {
            type: 'BlockStatement',
                start: 148,
                end: 2434,
                loc: [Object],
                body: [Object],
                directives: [] },
        hub: undefined,
            contexts: [],
            data: {},
        shouldSkip: false,
            shouldStop: false,
            removed: false,
            state:
        { references: [Object],
            constantViolations: [],
            assignments: [Object] },
        opts:
        { LabeledStatement: [Object],
            AssignmentExpression: [Object],
            UpdateExpression: [Object],
            UnaryExpression: [Object],
            ClassDeclaration: [Object],
            _exploded: true,
            _verified: true,
            Identifier: [Object],
            JSXIdentifier: [Object],
            enter: [Object],
            ForInStatement: [Object],
            ForStatement: [Object],
            ForOfStatement: [Object],
            ForAwaitStatement: [Object],
            FunctionDeclaration: [Object],
            VariableDeclaration: [Object],
            ExportAllDeclaration: [Object],
            ExportDefaultDeclaration: [Object],
            ExportNamedDeclaration: [Object],
            ImportDeclaration: [Object],
            DeclareClass: [Object],
            DeclareFunction: [Object],
            DeclareInterface: [Object],
            DeclareModule: [Object],
            DeclareModuleExports: [Object],
            DeclareTypeAlias: [Object],
            DeclareVariable: [Object],
            InterfaceDeclaration: [Object],
            TypeAlias: [Object],
            BlockStatement: [Object],
            Program: [Object] },
        skipKeys: {},
        parentPath:
            NodePath {
            parent: [Object],
                hub: undefined,
                contexts: [],
                data: {},
            shouldSkip: false,
                shouldStop: false,
                removed: false,
                state: [Object],
                opts: [Object],
                skipKeys: {},
            parentPath: [Object],
                context: [Object],
                container: [Object],
                listKey: undefined,
                inList: false,
                parentKey: 'body',
                key: 'body',
                node: [Object],
                scope: [Object],
                type: 'BlockStatement',
                typeAnnotation: null },
        context:
            TraversalContext {
            queue: null,
                parentPath: [Object],
                scope: [Object],
                state: [Object],
                opts: [Object],
                priorityQueue: [] },
        container:
            [ [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object],
                [Object] ],
                listKey: 'body',
            inList: true,
            parentKey: 'body',
            key: 8,
            node:
        Node {
            type: 'FunctionDeclaration',
                start: 2145,
                end: 2228,
                loc: [Object],
                id: [Object],
                generator: false,
                expression: false,
                async: false,
                params: [Object],
                body: [Object],
                leadingComments: [Object],
                trailingComments: [Object] },
        scope: [Circular],
            type: 'FunctionDeclaration',
            typeAnnotation: null },
    labels: Map { _c: Map {} },
    references: {},
    bindings:
    { param1:
        Binding {
        identifier: [Object],
            scope: [Circular],
            path: [Object],
            kind: 'param',
            constantViolations: [],
            constant: true,
            referencePaths: [Object],
            referenced: true,
            references: 1,
            hasDeoptedValue: false,
            hasValue: false,
            value: null },
        param2:
            Binding {
        identifier: [Object],
            scope: [Circular],
            path: [Object],
            kind: 'param',
            constantViolations: [],
            constant: true,
            referencePaths: [Object],
            referenced: true,
            references: 1,
            hasDeoptedValue: false,
            hasValue: false,
            value: null } },
    globals: {},
    uids: {},
    data: {} }
