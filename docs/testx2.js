Scope {
    uid: 11,
        parent:
    Scope {
        uid: 1,
            parent:
        Scope {
            uid: 0,
                parent: undefined,
                hub: undefined,
                parentBlock: [Object],
                block: [Object],
                path: [Object],
                labels: [Object],
                references: [Object],
                bindings: {},
            globals: [Object],
                uids: {},
            data: {},
            crawling: false },
        hub: undefined,
            parentBlock:
        Node {
            type: 'ArrayExpression',
                start: 99,
                end: 2575,
                loc: [Object],
                elements: [Object] },
        block:
            Node {
            type: 'FunctionExpression',
                start: 123,
                end: 2574,
                loc: [Object],
                id: null,
                generator: false,
                expression: false,
                async: false,
                params: [Object],
                body: [Object] },
        path:
            NodePath {
            parent: [Object],
                hub: undefined,
                contexts: [],
                data: {},
            shouldSkip: false,
                shouldStop: false,
                removed: false,
                state: [Object],
                opts: [Object],
                skipKeys: {},
            parentPath: [Object],
                context: [Object],
                container: [Object],
                listKey: 'elements',
                inList: true,
                parentKey: 'elements',
                key: 2,
                node: [Object],
                scope: [Circular],
                type: 'FunctionExpression',
                typeAnnotation: null },
        labels: Map { _c: Map {} },
        references: {},
        bindings:
        { '$scope': [Object],
            cache: [Object],
            decFun: [Object],
            scopeData: [Object],
            singleVariable: [Object],
            mutiVar1: [Object],
            mutiVar2: [Object],
            mutiVar3: [Object],
            mutiFun: [Object],
            mutiVar4: [Object],
            singleFun: [Object] },
        globals: {},
        uids: {},
        data: {} },
    hub: undefined,
        parentBlock:
    Node {
        type: 'AssignmentExpression',
            start: 1774,
            end: 2235,
            loc: SourceLocation { start: [Object], end: [Object] },
        operator: '=',
            left:
        Node {
            type: 'MemberExpression',
                start: 1774,
                end: 1798,
                loc: [Object],
                object: [Object],
                property: [Object],
                computed: false,
                leadingComments: null },
        right:
            Node {
            type: 'FunctionExpression',
                start: 1801,
                end: 2235,
                loc: [Object],
                id: null,
                generator: false,
                expression: false,
                async: false,
                params: [],
                body: [Object] },
        leadingComments: null },
    block:
        Node {
        type: 'FunctionExpression',
            start: 1801,
            end: 2235,
            loc: SourceLocation { start: [Object], end: [Object] },
        id: null,
            generator: false,
            expression: false,
            async: false,
            params: [],
            body:
        Node {
            type: 'BlockStatement',
                start: 1813,
                end: 2235,
                loc: [Object],
                body: [Object],
                directives: [] } },
    path:
        NodePath {
        parent:
            Node {
            type: 'AssignmentExpression',
                start: 1774,
                end: 2235,
                loc: [Object],
                operator: '=',
                left: [Object],
                right: [Object],
                leadingComments: null },
        hub: undefined,
            contexts: [ [Object] ],
            data: {},
        shouldSkip: false,
            shouldStop: false,
            removed: false,
            state: undefined,
            opts: { Identifier: [Object], _exploded: true, _verified: true },
        skipKeys: {},
        parentPath:
            NodePath {
            parent: [Object],
                hub: undefined,
                contexts: [Object],
                data: {},
            shouldSkip: false,
                shouldStop: false,
                removed: false,
                state: undefined,
                opts: [Object],
                skipKeys: {},
            parentPath: [Object],
                context: [Object],
                container: [Object],
                listKey: undefined,
                inList: false,
                parentKey: 'expression',
                key: 'expression',
                node: [Object],
                scope: [Object],
                type: 'AssignmentExpression',
                typeAnnotation: null },
        context:
            TraversalContext {
            queue: [Object],
                parentPath: [Object],
                scope: [Object],
                state: undefined,
                opts: [Object],
                priorityQueue: [] },
        container:
            Node {
            type: 'AssignmentExpression',
                start: 1774,
                end: 2235,
                loc: [Object],
                operator: '=',
                left: [Object],
                right: [Object],
                leadingComments: null },
        listKey: undefined,
            inList: false,
            parentKey: 'right',
            key: 'right',
            node:
        Node {
            type: 'FunctionExpression',
                start: 1801,
                end: 2235,
                loc: [Object],
                id: null,
                generator: false,
                expression: false,
                async: false,
                params: [],
                body: [Object] },
        scope: [Circular],
            type: 'FunctionExpression',
            typeAnnotation: null },
    labels: Map { _c: Map {} },
    references: {},
    bindings:
    { _subFun2:
        Binding {
        identifier: [Object],
            scope: [Circular],
            path: [Object],
            kind: 'hoisted',
            constantViolations: [],
            constant: true,
            referencePaths: [Object],
            referenced: true,
            references: 1,
            hasDeoptedValue: false,
            hasValue: false,
            value: null },
        subFun2:
            Binding {
        identifier: [Object],
            scope: [Circular],
            path: [Object],
            kind: 'var',
            constantViolations: [],
            constant: true,
            referencePaths: [Object],
            referenced: true,
            references: 1,
            hasDeoptedValue: false,
            hasValue: false,
            value: null },
        subFun1:
            Binding {
        identifier: [Object],
            scope: [Circular],
            path: [Object],
            kind: 'var',
            constantViolations: [],
            constant: true,
            referencePaths: [Object],
            referenced: true,
            references: 2,
            hasDeoptedValue: false,
            hasValue: false,
            value: null },
        fnMutiValue:
            Binding {
        identifier: [Object],
            scope: [Circular],
            path: [Object],
            kind: 'var',
            constantViolations: [],
            constant: true,
            referencePaths: [],
            referenced: false,
            references: 0,
            hasDeoptedValue: false,
            hasValue: false,
            value: null } },
    globals: {},
    uids: {},
    data: {} }
